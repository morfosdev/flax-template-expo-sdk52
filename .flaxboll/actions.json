{"1742319889654":{"actionType":"saveAll","createdAt":"1742319889654","actionID":"1742319889654","userID":"#TEMP","path":"system.capsules.f550c7f4-e8ec-42c1-b9b8-dc96a17ba9c0.capsUseCodeInfo.capsUseInputs.sss_freeValue-0.capsIptTxtValue","oldValue":"","newValue":"// ---------- import Local Tools\nimport { setData, getVarValue } from '../project';\n\nexport const css1 =\n  'color: yellow; background-color: black; font-size: 11px; padding: 2px 6px; border-radius: 3px';\nexport const css2 =\n  'color: green; background-color: black; font-size: 10px; padding: 2px 6px; border-radius: 3px';\n\nexport const css3 =\n  'color: yellow; background-color: red; font-size: 11px; padding: 2px 6px; border-radius: 3px';\nexport const css4 =\n  'color: yellow; background-color: darkred; font-size: 10px; padding: 2px 6px; border-radius: 3px';\n\ntype Tprops_setVar = { args: any; pass: { keyPath: string[]; value: any } };\n\nexport const setVar = (props: Tprops_setVar) => {\n  // ---------- set Caps Inputs\n  const { args, pass } = props;\n  let { keyPath, value } = pass;\n  console.log('%csetVar', { keyPath, value, args });\n  console.log({ args });\n\n  // ---------- join String\n  const url = keyPath.reduce((prev, curr) => prev + curr, '');\n\n  // ------------- IF is FREE VALUE\n  if (true) {\n    return setData({ path: url, value: value });\n  }\n\n  const { updatedValue } = testArgsVars(value, args);\n  console.log('SET VAR..', { updatedValue });\n  value = updatedValue;\n\n  // --------- update Central Data\n  if (value === undefined) {\n    // --------- set Consoles System\n    console.log('%csetVar', css3);\n    console.log('%csetVar path', css4, url);\n    console.table('%csetVar value', css4, 'o valor de value Ã© ' + value);\n  }\n\n  if (value !== undefined) {\n    // --------- set Consoles System\n    console.log('%csetVar', css1);\n    console.log('path:', url);\n    console.table('value:', value);\n\n    setData({ path: url, value: value });\n  }\n};\n\nconst findFlatItem = obj => {\n  if (typeof obj !== 'object' || obj === null) return null;\n\n  if ('item' in obj) return obj.item;\n\n  for (const key in obj) {\n    if (Array.isArray(obj[key])) {\n      for (const element of obj[key]) {\n        const found = findFlatItem(element);\n        if (found) return found;\n      }\n    } else if (typeof obj[key] === 'object') {\n      const found = findFlatItem(obj[key]);\n      if (found) return found;\n    }\n  }\n\n  return null;\n};\n\nconst testArgsVars = (children, args) => {\n  let condChildren = '';\n  let updatedValue = undefined;\n\n  console.log({ children });\n  console.log({ args });\n\n  const joinedChild = children.join();\n  if (joinedChild.includes('$var_')) condChildren = 'var';\n  if (joinedChild.includes('$arg_')) condChildren = 'arg';\n\n  console.log({ condChildren });\n\n  // --------------------------\n  // ------- Tratamento de ARGs\n  // --------------------------\n  if (condChildren === 'arg') {\n    const key = joinedChild.split('_')[1];\n\n    console.log('TEXT', { key });\n\n    // ---- Para Callback Functions\n    // ---- Ex. onChangeText do TextInput\n    const condInput = key === 'callback';\n    if (condInput) {\n      updatedValue = args[0];\n    }\n\n    // ---- Para Listas\n    // ---- Passa todo objeto 'item'\n    const condFull = key === 'full';\n    if (condFull) {\n      updatedValue = findFlatItem(args);\n    }\n\n    // ---- Para Listas\n    // ---- Seleciona um campo dentro de 'item'\n    const foundItem = findFlatItem(args);\n    if (foundItem && foundItem[key]) {\n      updatedValue = foundItem[key];\n      console.log('TEXT IF', { updatedValue });\n    }\n\n    // updatedValue = args[0];\n    console.log('TEXT', { updatedValue });\n  }\n\n  // --------------------------\n  // ------- Tratamento de VARs\n  // --------------------------\n  if (condChildren === 'var') {\n    const [condVar, varValue] = getVarValue(joinedChild, 'noComponent');\n    if (condVar) updatedValue = varValue;\n    if (!condVar) console.log('VAR ERROR', { updatedValue });\n  }\n\n  if (updatedValue === undefined) console.log('ARG ERROR', { updatedValue });\n\n  return { condChildren, updatedValue };\n};"}}